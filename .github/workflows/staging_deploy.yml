name: "Terraform - Staging"
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
permissions:
  contents: read
  pull-requests: write
jobs:
  # terraform:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.1.9
  #         terraform_wrapper: true
  #     - name: Terraform fmt
  #       id: fmt-network
  #       run: terraform fmt
  #       continue-on-error: true
  #       working-directory: ./staging/network
  #     - name: Terraform Init
  #       id: init-network
  #       run: terraform init
  #       working-directory: ./staging/network
  #     - name: Terraform Validate
  #       id: validate-network
  #       run: terraform validate -no-color
  #       working-directory: ./staging/network
  #     - name: Terraform Plan
  #       id: plan-network
  #       run: terraform plan -input=false -no-color -out network.plan
  #       working-directory: ./staging/network
  #       continue-on-error: true
  #     - name: Get result
  #       run: echo "${{ steps.validate.outputs.stdout }}"
  #     - name: Terraform Show
  #       id: show-network
  #       run: terraform show -no-color network.plan 2>&1 > /tmp/network.txt
  #       working-directory: ./staging/network
  #     - uses: actions/github-script@v6
  #       if: github.event_name == 'pull_request'
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: "const fs = require(\"fs\");\nconst plan = fs.readFileSync(\"/tmp/network.txt\", \"utf8\");\nconst maxGitHubBodyCharacters = 65536;\n\nfunction chunkSubstr(str, size) {\n  const numChunks = Math.ceil(str.length / size)\n  const chunks = new Array(numChunks)\n  for (let i = 0, o = 0; i < numChunks; ++i, o += size) {\n    chunks[i] = str.substr(o, size)\n  }\n  return chunks\n}\n\n// Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action\nvar plans = chunkSubstr(plan, maxGitHubBodyCharacters); \nfor (let i = 0; i < plans.length; i++) {\n  const output = `### ${{ inputs.plan-title }} Part # ${i + 1}\n  #### Terraform Format and Style 🖌\\`${{ steps.fmt.outcome }}\\`\n  #### Terraform Initialization ⚙️\\`${{ steps.init.outcome }}\\`\n  #### Terraform Plan 📖\\`${{ steps.plan.outcome }}\\`\n  <details><summary>Show Plan</summary>\n  \\`\\`\\`\\n\n  ${plans[i]}\n  \\`\\`\\`\n  </details>\n  *Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`, Working Directory: \\`${{ inputs.working-directory }}\\`, Workflow: \\`${{ github.workflow }}\\`*`;   \n\n  await github.rest.issues.createComment({\n    issue_number: context.issue.number,\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    body: output\n  })\n}\n"
  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
  #       run: terraform apply -input=false network.plan
  #       working-directory: ./staging/network
  #       shell: bash
  #     - name: Terraform fmt
  #       id: fmt-service
  #       run: terraform fmt
  #       continue-on-error: true
  #       working-directory: ./staging/service
  #     - name: Terraform Init
  #       id: init-service
  #       run: terraform init
  #       working-directory: ./staging/service
  #     - name: Terraform Validate
  #       id: validate-service
  #       run: terraform validate -no-color
  #       working-directory: ./staging/service
  #     - name: Terraform Plan
  #       id: plan-service
  #       run: terraform plan -input=false -no-color -out service.plan
  #       working-directory: ./staging/service
  #       continue-on-error: true
  #     - name: Get result
  #       run: echo "${{ steps.validate.outputs.stdout }}"
  #     - name: Terraform Show
  #       id: show-service
  #       run: terraform show -no-color service.plan 2>&1 > /tmp/service.txt
  #       working-directory: ./staging/service
  #     - uses: actions/github-script@v6
  #       if: github.event_name == 'pull_request'
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: "const fs = require(\"fs\");\nconst plan = fs.readFileSync(\"/tmp/service.txt\", \"utf8\");\nconst maxGitHubBodyCharacters = 65536;\n\nfunction chunkSubstr(str, size) {\n  const numChunks = Math.ceil(str.length / size)\n  const chunks = new Array(numChunks)\n  for (let i = 0, o = 0; i < numChunks; ++i, o += size) {\n    chunks[i] = str.substr(o, size)\n  }\n  return chunks\n}\n\n// Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action\nvar plans = chunkSubstr(plan, maxGitHubBodyCharacters); \nfor (let i = 0; i < plans.length; i++) {\n  const output = `### ${{ inputs.plan-title }} Part # ${i + 1}\n  #### Terraform Format and Style 🖌\\`${{ steps.fmt.outcome }}\\`\n  #### Terraform Initialization ⚙️\\`${{ steps.init.outcome }}\\`\n  #### Terraform Plan 📖\\`${{ steps.plan.outcome }}\\`\n  <details><summary>Show Plan</summary>\n  \\`\\`\\`\\n\n  ${plans[i]}\n  \\`\\`\\`\n  </details>\n  *Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`, Working Directory: \\`${{ inputs.working-directory }}\\`, Workflow: \\`${{ github.workflow }}\\`*`;   \n\n  await github.rest.issues.createComment({\n    issue_number: context.issue.number,\n    owner: context.repo.owner,\n    repo: context.repo.repo,\n    body: output\n  })\n}"
  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
  #       run: terraform apply -input=false service.plan
  #       working-directory: ./staging/service
  #       shell: bash
  ansible:
    name: "Ansible"
    runs-on: ubuntu-20.04
    # needs: terraform
    environment: staging
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Ansible
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y ansible
          python -m pip install boto3
      - name: Run Ansible
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: ansible-playbook -i ../staging/aws_ec2.yaml ./configure_webserver.yaml
        working-directory: ./ansible
